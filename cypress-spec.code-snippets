{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New spec file": {
		"scope": "javascript,typescript",
		"prefix": "spec",
		"body": [
            "/// <reference types=\"Cypress\" />",
            "var os = require('../../support/selectors.js');",
            "",
            "describe('${1:<Enter top level test description here>}', function() {",
            "  before('Login', function() {",
            "    cy.login();",
            "  });",
            "",
            "  it('should ${2:<enter test description here}', function() {",
            "    // Setup",
            "    ${3:// <Enter setup steps here>}",
            "",
            "    // Test",
            "    ${4:// <Enter test steps here>}",
            "",
            "    // Clean up",
            "    ${5:// <Enter clean up steps here>}",
            "  });$0",
            "});",
            ""
        ],
		"description": "Template for new spec file"
  },
  "Add header": {
    "scope": "javascript,typescript",
    "prefix": "head",
    "body": [
            "// *** DESCRIPTION ***",
            "// Intent:",
            "// ${1:<Enter intent here>}",
            "// Exclusions:",
            "// ${2:<Enter exclusions here>}",
            "",
            "// *** DATA REQUIREMENTS ***",
            "// Persistent:",
            "// ${3:<Enter persistent requirements here>}",
            "// Non-persistent:",
            "// ${4:<Enter non-persistent requirements here>}$0"
        ],
    "description": "Add header"
  },
  "Add describe": {
    "scope": "javascript,typescript",
    "prefix": "desc",
    "body": [
            "describe('${1:<Enter top level test description here>}', function() {",
            "  before('Open opensphere', function() {",
            "    cy.login();",
            "  });",
            "",
            "  it('should ${2:<enter test description here}', function() {",
            "    // Setup",
            "    ${3:// <Enter setup steps here>}",
            "",
            "    // Test",
            "    ${4:// <Enter test steps here>}",
            "",
            "    // Clean up",
            "    ${5:// <Enter clean up steps here>}",
            "  });",
            "});",
            "$0"
        ],
    "description": "Add describe block"
  },
  "Add it": {
    "scope": "javascript,typescript",
    "prefix": "it",
    "body": [
            "it('${1:<enter test description here}', function() {",
            "  // Setup",
            "  ${2:// <Enter setup steps here>}",
            "",
            "  // Test",
            "  ${3:// <Enter test steps here>}",
            "",
            "  // Clean up",
            "  ${4:// <Enter clean up steps here>}",
            "});",
            "$0"
        ],
    "description": "Add it block"
  },
  "Add before": {
    "scope": "javascript,typescript",
    "prefix": "bef",
    "body": [
            "before('${1:<enter before description here>}', function() {",
            "  ${2:// <Enter before steps here>}",
            "});",
            "$0"
        ],
    "description": "Add before block"
  },
  "Add after": {
    "scope": "javascript,typescript",
    "prefix": "aft",
    "body": [
            "after('${1:<enter after description here>}', function() {",
            "  ${2:// <Enter after steps here>}",
            "});",
            "$0"
        ],
    "description": "Add after block"
  },
  "Handle exception": {
    "scope": "javascript,typescript",
    "prefix": "exc",
    "body": [
            "// TODO: Remove exception handling promptly after referenced issue(s) have been resolved.",
            "cy.on('uncaught:exception', function(err) {",
            "// ${1:<Indicate the action that causes the console error here>} throws an error, #${2:<Enter the GitHub issue ID here>}",
            "  if (err.message.includes('${3:<Enter the error message text fragment here>}')) {",
            "    expect(err.message).to.include('${3:<Enter the error message text fragment here>}');",
            "    return false;",
            "  }",
            "  return true;",
        "});",
        "$0"
        ],
    "description": "Add exception handling"
  },
  "Add TODO": {
    "scope": "javascript,typescript",
    "prefix": "todo",
    "body": "// TODO: ${1:<Enter todo text here>}",
    "description": "Adds TODO comment"
  },
  "Stub route": {
    "scope": "javascript,typescript",
    "prefix": "stu",
    "body": [
      "cy.route('**/${1:<Enter path folder here>}/${2:<Enter resource here>}', 'fx:/smoke-tests/${3:<Enter test script folder here>}/${4:<Enter filename here>}.stub.xml')",
      "    .as('${5:<Enter alias name here>}');$0",
      ],
    "description": "Add network route"
  }
}